{"version":3,"sources":["component/weather.js","component/form.js","App.js","serviceWorker.js","index.js"],"names":["Weather","props","error","className","city","country","weatherIcon","temp","min","max_temp","max","min_temp","description","Forms","onSubmit","loader","type","name","placeholder","App","getWeather","e","a","cityName","target","value","countryName","preventDefault","fetch","api_call","json","response","t","Math","floor","main","mn","temp_min","mx","temp_max","setState","sys","weather","get_weatherIcons","id","alert","state","undefined","icon","Thunderstorm","Drizzle","Rain","Snow","Atmosphere","Clear","Clouds","rangeId","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"kSAiCeA,MA/Bf,SAAiBC,GAEb,OAAkB,GAAfA,EAAMC,MAEG,8BAIJ,yBAAKC,UAAU,wBACX,yBAAKA,UAAU,SACX,4BAAKF,EAAMG,KAAX,KAAmBH,EAAMI,SACzB,wBAAIF,UAAU,QACV,uBAAGA,UAAS,aAAQF,EAAMK,YAAd,iBAEhB,wBAAIH,UAAU,yBAAyBF,EAAMM,KAA7C,QACA,wBAAIJ,UAAU,qBAUpBK,EATgBP,EAAMQ,SASjBC,EAT2BT,EAAMU,SAY5C,6BAAMD,EAAN,QAAiBF,EAAjB,UAVgB,wBAAIL,UAAU,yBAAyBF,EAAMW,eAOrE,IAAcJ,EAAKE,G,YCHJG,MArBf,SAAgBZ,GAEZ,OACI,yBAAKE,UAAU,aACX,0BAAMW,SAAUb,EAAMc,OAAQZ,UAAU,cACpC,yBAAKA,UAAU,iBACX,yBAAKA,UAAU,iBACX,2BAAOA,UAAU,2EAA2Ea,KAAK,OAAOC,KAAK,OAAOC,YAAY,UAEpI,yBAAKf,UAAU,iBACX,2BAAOA,UAAU,2EAA2Ea,KAAK,OAAOC,KAAK,UAAUC,YAAY,aAEvI,yBAAKf,UAAU,iBACX,4BAAQa,KAAK,SAASb,UAAU,mBAAhC,oBC0GTgB,E,kDA/Gb,aAAc,IAAD,8BACX,gBAyDFC,WA1Da,uCA0DA,WAAMC,GAAN,2BAAAC,EAAA,yDAELC,EAAWF,EAAEG,OAAOpB,KAAKqB,MACzBC,EAAcL,EAAEG,OAAOnB,QAAQoB,MACrCJ,EAAEM,kBAECJ,IAAYG,EANJ,iCAQcE,MAAM,oDAAD,OAAqDL,EAArD,YAAiEG,EAAjE,kBAtElB,qCA8DD,cAQHG,EARG,gBAUcA,EAASC,OAVvB,OAUHC,EAVG,OAaHC,EAAIC,KAAKC,MAAOH,EAASI,KAAK5B,KAAM,QACpC6B,EAAKH,KAAKC,MAAOH,EAASI,KAAKE,SAAU,QACzCC,EAAKL,KAAKC,MAAOH,EAASI,KAAKI,SAAU,QAG/C,EAAKC,SAAS,CACZpC,KAAM2B,EAASd,KACfZ,QAAS0B,EAASU,IAAIpC,QACtBE,KAAMyB,EACNrB,SAAUyB,EACV3B,SAAU6B,EACV1B,YAAamB,EAASW,QAAQ,GAAG9B,YACjCV,OAAO,IAGT,EAAKyC,iBAAiBZ,EAASW,QAAQ,GAAGE,IA5BjC,wBA+BTC,MAAM,sCA/BG,4CA1DA,sDAEX,EAAKC,MAAQ,CACX1C,UAAM2C,EACN1C,aAAS0C,EACTxC,UAAMwC,EACNtC,cAAUsC,EACVpC,cAAUoC,EACVC,UAAMD,EACNnC,iBAAamC,EACb7C,OAAO,GAGT,EAAKI,YAAc,CACjB2C,aAAc,kBACdC,QAAS,WACTC,KAAM,mBACNC,KAAM,UACNC,WAAY,SACZC,MAAO,eACPC,OAAQ,cApBC,E,6DAyBIC,GAEZA,GAAW,KAAOA,GAAW,IAE9BC,KAAKjB,SAAS,CAACQ,KAAMS,KAAKnD,YAAY2C,eAEhCO,GAAW,KAAOA,GAAW,IAEnCC,KAAKjB,SAAS,CAACQ,KAAMS,KAAKnD,YAAY4C,UAEhCM,GAAW,KAAOA,GAAW,IAEnCC,KAAKjB,SAAS,CAACQ,KAAMS,KAAKnD,YAAY6C,OAEhCK,GAAW,KAAOA,GAAW,IAEnCC,KAAKjB,SAAS,CAACQ,KAAMS,KAAKnD,YAAY8C,OAEhCI,GAAW,KAAOA,GAAW,IAEnCC,KAAKjB,SAAS,CAACQ,KAAMS,KAAKnD,YAAY+C,aAErB,KAAXG,EAENC,KAAKjB,SAAS,CAACQ,KAAMS,KAAKnD,YAAYgD,QAGtCG,KAAKjB,SAAS,CAACQ,KAAMS,KAAKnD,YAAYiD,W,+BA0CxC,OACE,yBAAKpD,UAAU,OACb,kBAAC,EAAD,CAAOY,OAAQ0C,KAAKrC,aACpB,kBAAC,EAAD,CAAShB,KAAMqD,KAAKX,MAAM1C,KAC1BC,QAASoD,KAAKX,MAAMzC,QACpBE,KAAMkD,KAAKX,MAAMvC,KACjBI,SAAU8C,KAAKX,MAAMnC,SACrBF,SAAUgD,KAAKX,MAAMrC,SACrBG,YAAa6C,KAAKX,MAAMlC,YACxBN,YAAamD,KAAKX,MAAME,KACxB9C,MAAOuD,KAAKX,MAAM5C,a,GAzGRwD,IAAMC,WCEJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA1E,GACL2E,QAAQ3E,MAAMA,EAAM4E,a","file":"static/js/main.61208b78.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction Weather(props){\r\n\r\n    if(props.error == true)\r\n    {\r\n        return (<div></div>);\r\n    }\r\n    else{\r\n        return (\r\n            <div className=\"container text-light\">\r\n                <div className=\"cards\">\r\n                    <h1>{props.city}, {props.country}</h1>\r\n                    <h5 className=\"py-4\">\r\n                        <i className={`wi ${props.weatherIcon} display-1`}></i>\r\n                    </h5>\r\n                    <h4 className=\"font-weight-bold py-2\">{props.temp}&deg;</h4>\r\n                    <h5 className=\"font-weight-bold\">\r\n                        {temp(props.max_temp, props.min_temp)}\r\n                    </h5>\r\n                        <h4 className=\"font-weight-bold py-2\">{props.description}</h4>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction temp(min, max)\r\n{\r\n    return (\r\n        <div>{max}&deg; {min}&deg;</div>\r\n    );\r\n}\r\nexport default Weather;","import React from 'react';\r\nimport './form.css';\r\n\r\nfunction Forms (props){\r\n    \r\n    return (\r\n        <div className=\"container\">\r\n            <form onSubmit={props.loader} className=\"text-light\">\r\n                <div className=\"form-row py-3\">\r\n                    <div className=\"col-md-5 py-2\">\r\n                        <input className=\"text-light form-control border border-top-0 border-right-0 border-left-0\" type=\"text\" name=\"city\" placeholder=\"City\"></input>\r\n                    </div>\r\n                    <div className=\"col-md-5 py-2\">\r\n                        <input className=\"text-light form-control border border-top-0 border-right-0 border-left-0\" type=\"text\" name=\"country\" placeholder=\"Country\"></input>\r\n                    </div>\r\n                    <div className=\"col-md-2 py-2\">\r\n                        <button type=\"submit\" className=\"btn btn-warning\">Get Weather</button>\r\n                    </div>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Forms;","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport Weather from './component/weather';\nimport 'weather-icons/css/weather-icons.css';\nimport Forms from './component/form';\n\nconst Api_key = \"9af02ed858cf50a1ee88c9246e37b078\";\n//api call = api.openweathermap.org/data/2.5/weather?q=allahabad,india\n\nclass App extends React.Component{\n  constructor(){\n    super();\n    this.state = {\n      city: undefined,\n      country: undefined,\n      temp: undefined,\n      max_temp: undefined,\n      min_temp: undefined,\n      icon: undefined,\n      description: undefined,\n      error: true\n    };\n    \n    this.weatherIcon = {\n      Thunderstorm: \"wi-thunderstorm\",\n      Drizzle: \"wi-sleet\",\n      Rain: \"wi-storm-showers\",\n      Snow: \"wi-snow\",\n      Atmosphere: \"wi-fog\",\n      Clear: \"wi-day-sunny\",\n      Clouds: \"wi-day-fog\"\n    };\n\n  }\n\n  get_weatherIcons(rangeId){\n\n    if(rangeId >= 200 && rangeId <= 232)\n    {\n      this.setState({icon: this.weatherIcon.Thunderstorm});\n    }\n    else if(rangeId >= 300 && rangeId <= 321)\n    {\n      this.setState({icon: this.weatherIcon.Drizzle});\n    }\n    else if(rangeId >= 500 && rangeId <= 531)\n    {\n      this.setState({icon: this.weatherIcon.Rain});\n    }\n    else if(rangeId >= 600 && rangeId <= 622)\n    {\n      this.setState({icon: this.weatherIcon.Snow});\n    }\n    else if(rangeId >= 701 && rangeId <= 781)\n    {\n      this.setState({icon: this.weatherIcon.Atmosphere});\n    }\n    else if(rangeId == 800)\n    {\n      this.setState({icon: this.weatherIcon.Clear});\n    }\n    else{\n      this.setState({icon: this.weatherIcon.Clouds});\n    }\n  \n  }\n\n\n  getWeather = async e =>{\n\n    const cityName = e.target.city.value;\n    const countryName = e.target.country.value;\n    e.preventDefault();\n\n    if(cityName && countryName)\n    {\n      const api_call = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${cityName},${countryName}&appid=${Api_key}`);\n\n      const response = await api_call.json();\n\n\n      const t = Math.floor((response.main.temp)-273.15);\n      const mn = Math.floor((response.main.temp_min)-273.15);\n      const mx = Math.floor((response.main.temp_max)-273.15);\n\n\n      this.setState({\n        city: response.name,\n        country: response.sys.country,\n        temp: t,\n        min_temp: mn,\n        max_temp: mx,\n        description: response.weather[0].description,\n        error: false\n      });\n\n      this.get_weatherIcons(response.weather[0].id);\n    }\n    else{\n      alert(\"Please enter City and Country name\");\n    }\n  }\n\n  render(){\n    return (\n      <div className=\"App\">\n        <Forms loader={this.getWeather} />\n        <Weather city={this.state.city}\n        country={this.state.country}\n        temp={this.state.temp}\n        min_temp={this.state.min_temp}\n        max_temp={this.state.max_temp}\n        description={this.state.description}\n        weatherIcon={this.state.icon}\n        error={this.state.error}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}